/*
 * GLSLGenerator.cpp
 * 
 * This file is part of the XShaderCompiler project (Copyright (c) 2014-2017 by Lukas Hermanns)
 * See "LICENSE.txt" for license information.
 */

#include "GLSLGenerator.h"
#include "GLSLExtensionAgent.h"
#include "GLSLConverter.h"
#include "GLSLKeywords.h"
#include "GLSLIntrinsics.h"
#include "ReferenceAnalyzer.h"
#include "StructParameterAnalyzer.h"
#include "TypeDenoter.h"
#include "Exception.h"
#include "Helper.h"
#include "ReportIdents.h"
#include <initializer_list>
#include <algorithm>
#include <cctype>
#include <set>


namespace Xsc
{


/*
 * Internal structures
 */

struct IfStmntArgs
{
    bool inHasElseParentNode;
};

struct StructDeclArgs
{
    bool inEndWithSemicolon;
    bool outStructWritten;
};


/*
 * GLSLGenerator class
 */

GLSLGenerator::GLSLGenerator(Log* log) :
    Generator{ log }
{
}

void GLSLGenerator::GenerateCodePrimary(
    Program& program, const ShaderInput& inputDesc, const ShaderOutput& outputDesc)
{
    /* Store parameters */
    versionOut_         = outputDesc.shaderVersion;
    nameMangling_       = outputDesc.nameMangling;
    allowExtensions_    = outputDesc.options.allowExtensions;
    explicitBinding_    = outputDesc.options.explicitBinding;
    preserveComments_   = outputDesc.options.preserveComments;
    allowLineMarks_     = outputDesc.formatting.lineMarks;
    compactWrappers_    = outputDesc.formatting.compactWrappers;
    alwaysBracedScopes_ = outputDesc.formatting.alwaysBracedScopes;

    for (const auto& s : outputDesc.vertexSemantics)
    {
        const auto semanticCi = ToCiString(s.semantic);
        vertexSemanticsMap_[semanticCi] = { s.location, 0 };
    }

    if (program.entryPointRef)
    {
        try
        {
            /* Mark all structures that are used for another reason than entry-point parameter */
            {
                StructParameterAnalyzer structAnalyzer;
                structAnalyzer.MarkStructsFromEntryPoint(program, inputDesc.shaderTarget);
            }

            /* Convert AST for GLSL code generation */
            {
                GLSLConverter converter;
                converter.Convert(program, inputDesc.shaderTarget, nameMangling_, outputDesc.options, IsVKSL());
            }

            /* Mark all reachable AST nodes */
            {
                ReferenceAnalyzer refAnalyzer;
                refAnalyzer.MarkReferencesFromEntryPoint(program, inputDesc.shaderTarget);
            }

            /* Write header */
            if (inputDesc.entryPoint.empty())
                WriteComment("GLSL " + ToString(GetShaderTarget()));
            else
                WriteComment("GLSL " + ToString(GetShaderTarget()) + " \"" + inputDesc.entryPoint + "\"");
        
            WriteComment("Generated by XShaderCompiler");

            WriteComment(TimePoint());
            Blank();

            /* Visit program AST */
            Visit(&program);

            /* Check for optional warning feedback */
            ReportOptionalFeedback();
        }
        catch (const Report& e)
        {
            throw e;
        }
        catch (const ASTRuntimeError& e)
        {
            Error(e.what(), e.GetAST());
        }
        catch (const std::exception& e)
        {
            Error(e.what());
        }
    }
    else
        Error(R_EntryPointNotFound(inputDesc.entryPoint));
}


/*
 * ======= Private: =======
 */

std::unique_ptr<std::string> GLSLGenerator::SystemValueToKeyword(const IndexedSemantic& semantic) const
{
    if (semantic == Semantic::Target && versionOut_ > OutputShaderVersion::GLSL120)
        return MakeUnique<std::string>(semantic.ToString());
    else
        return SemanticToGLSLKeyword(semantic, IsVKSL());
}

bool GLSLGenerator::IsWrappedIntrinsic(const Intrinsic intrinsic) const
{
    static const std::set<Intrinsic> wrappedIntrinsics
    {
        Intrinsic::Clip,
        Intrinsic::SinCos,
    };
    return (wrappedIntrinsics.find(intrinsic) != wrappedIntrinsics.end());
}

bool GLSLGenerator::IsESSL() const
{
    return IsLanguageESSL(versionOut_);
}

bool GLSLGenerator::IsVKSL() const
{
    return IsLanguageVKSL(versionOut_);
}

const std::string* GLSLGenerator::BufferTypeToKeyword(const BufferType bufferType, const AST* ast)
{
    if (auto keyword = BufferTypeToGLSLKeyword(bufferType, IsVKSL()))
        return keyword;
    else
        Error(R_FailedToMapToGLSLKeyword(R_BufferType), ast);
    return nullptr;
}

const std::string* GLSLGenerator::SamplerTypeToKeyword(const SamplerType samplerType, const AST* ast)
{
    if (auto keyword = SamplerTypeToGLSLKeyword(samplerType))
        return keyword;
    else
        Error(R_FailedToMapToGLSLKeyword(R_SamplerType), ast);
    return nullptr;
}

const std::string* GLSLGenerator::DataTypeToImageFormatKeyword(const DataType dataType, const AST* ast)
{
    if (auto keyword = DataTypeToImageFormatGLSLKeyword(dataType))
        return keyword;
    else
        Error(R_FailedToMapToGLSLKeyword(R_DataType), ast);
    return nullptr;
}

bool GLSLGenerator::IsTypeCompatibleWithSemantic(const Semantic semantic, const TypeDenoter& typeDenoter)
{
    if (auto baseTypeDen = typeDenoter.As<BaseTypeDenoter>())
    {
        auto dataType = baseTypeDen->dataType;

        switch (semantic)
        {
            case Semantic::DispatchThreadID:
            case Semantic::GroupID:
            case Semantic::GroupThreadID:
                return (dataType == DataType::UInt3);

            case Semantic::GroupIndex:
                return (dataType == DataType::UInt);

            case Semantic::GSInstanceID:
            case Semantic::InstanceID:
            case Semantic::OutputControlPointID:
            case Semantic::PrimitiveID:
            case Semantic::SampleIndex:
            case Semantic::VertexID:
                return (dataType == DataType::Int);

            default:
                break;
        }
        return true;
    }
    return false;
}

void GLSLGenerator::ReportOptionalFeedback()
{
    /* Report warnings for unused and overwritten vertex semantic bindings */
    if (explicitBinding_ && IsVertexShader())
    {
        /* Check for vertex semantics that have not been found */
        std::map<int, int> locationUseCount;

        for (const auto& vertSemantic : vertexSemanticsMap_)
        {
            const auto& sem = vertSemantic.second;
            if (sem.found)
                ++locationUseCount[sem.location];
            else
                Warning(R_VertexSemanticNotFound(ToString(vertSemantic.first)));
        }

        /* Check for multiple usages of vertex semantic locations */
        for (const auto& loc : locationUseCount)
        {
            if (loc.second > 1)
                Warning(R_MultiUseOfVertexSemanticLocation(loc.first, loc.second));
        }
    }
}

void GLSLGenerator::ErrorIntrinsic(const std::string& intrinsicName, const AST* ast)
{
    Error(R_FailedToMapToGLSLKeyword(R_Intrinsic(intrinsicName)), ast);
}

/* ------- Visit functions ------- */

#define IMPLEMENT_VISIT_PROC(AST_NAME) \
    void GLSLGenerator::Visit##AST_NAME(AST_NAME* ast, void* args)

IMPLEMENT_VISIT_PROC(Program)
{
    /* Write version and required extensions first */
    WriteProgramHeader();

    /* Write global input/output layouts */
    WriteGlobalLayouts();

    /* Write wrapper functions for special intrinsics */
    WriteWrapperIntrinsics();

    /* Write global uniform declarations */
    WriteGlobalUniforms();

    /* Write global input/output semantics */
    BeginSep();
    {
        WriteGlobalInputSemantics(GetProgram()->entryPointRef);
    }
    EndSep();

    BeginSep();
    {
        WriteGlobalOutputSemantics(GetProgram()->entryPointRef);
    }
    EndSep();

    /* Write global program statements */
    WriteStmntList(ast->globalStmnts, true);
}

IMPLEMENT_VISIT_PROC(CodeBlock)
{
    WriteScopeOpen();
    {
        WriteStmntList(ast->stmnts);
    }
    WriteScopeClose();
}

IMPLEMENT_VISIT_PROC(FunctionCall)
{
    /* Check for special cases of intrinsic function calls */
    if (ast->intrinsic == Intrinsic::Mul)
        WriteFunctionCallIntrinsicMul(ast);
    else if (ast->intrinsic == Intrinsic::Rcp)
        WriteFunctionCallIntrinsicRcp(ast);
    else if (ast->intrinsic == Intrinsic::Clip && ast->flags(FunctionCall::canInlineIntrinsicWrapper))
        WriteFunctionCallIntrinsicClip(ast);
    else if (ast->intrinsic >= Intrinsic::InterlockedAdd && ast->intrinsic <= Intrinsic::InterlockedXor)
        WriteFunctionCallIntrinsicAtomic(ast);
    else if (ast->intrinsic >= Intrinsic::Image_AtomicAdd && ast->intrinsic <= Intrinsic::Image_AtomicExchange)
        WriteFunctionCallIntrinsicAtomic(ast);
    else if (ast->intrinsic == Intrinsic::StreamOutput_Append)
        WriteFunctionCallIntrinsicStreamOutputAppend(ast);
    else if (ast->intrinsic == Intrinsic::Texture_QueryLod)
        WriteFunctionCallIntrinsicTextureQueryLod(ast, true);
    else if (ast->intrinsic == Intrinsic::Texture_QueryLodUnclamped)
        WriteFunctionCallIntrinsicTextureQueryLod(ast, false);
    else
        WriteFunctionCallStandard(ast);
}

IMPLEMENT_VISIT_PROC(SwitchCase)
{
    /* Write case header */
    if (ast->expr)
    {
        BeginLn();
        {
            Write("case ");
            Visit(ast->expr);
            Write(":");
        }
        EndLn();
    }
    else
        WriteLn("default:");

    /* Write statement list */
    IncIndent();
    {
        Visit(ast->stmnts);
    }
    DecIndent();
}

IMPLEMENT_VISIT_PROC(ArrayDimension)
{
    Write(ast->ToString());
}

IMPLEMENT_VISIT_PROC(TypeSpecifier)
{
    if (ast->structDecl)
        Visit(ast->structDecl);
    else
        WriteTypeDenoter(*ast->typeDenoter, IsESSL(), ast);
}

IMPLEMENT_VISIT_PROC(VarIdent)
{
    WriteVarIdent(ast);
}

/* --- Declarations --- */

IMPLEMENT_VISIT_PROC(VarDecl)
{
    Write(InsideStructDecl() ? ast->ident.Original() : ast->ident.Final());

    Visit(ast->arrayDims);

    if (ast->initializer)
    {
        if (auto typeDen = ast->initializer->GetTypeDenoter()->Get())
        {
            if (!typeDen->IsNull())
            {
                Write(" = ");
                Visit(ast->initializer);
            }
        }
    }
}

IMPLEMENT_VISIT_PROC(StructDecl)
{
    if (ast->flags(StructDecl::isNonEntryPointParam) || !ast->flags(StructDecl::isShaderInput | StructDecl::isShaderOutput))
    {
        PushStructDecl(ast);
        {
            /* Write all nested structures (if this is the root structure) */
            if (!ast->flags(StructDecl::isNestedStruct))
            {
                /* Write nested structres in child-to-parent order */
                for (auto nestedStruct = ast->nestedStructDeclRefs.rbegin(); nestedStruct != ast->nestedStructDeclRefs.rend(); ++nestedStruct)
                {
                    if (WriteStructDecl(*nestedStruct, true, true))
                        Blank();
                }
            }

            /* Write declaration of this structure (without nested structures) */
            if (auto structDeclArgs = reinterpret_cast<StructDeclArgs*>(args))
                structDeclArgs->outStructWritten = WriteStructDecl(ast, structDeclArgs->inEndWithSemicolon);
            else
                WriteStructDecl(ast, false);
        }
        PopStructDecl();
    }
}

IMPLEMENT_VISIT_PROC(SamplerDecl)
{
    if (IsVKSL())
    {
        BeginLn();
        {
            /* Write layout binding */
            WriteLayout(
                { [&]() { WriteLayoutBinding(ast->slotRegisters); } }
            );

            /* Write uniform sampler declaration (sampler declarations must only appear in global scope) */
            Write("uniform sampler " + ast->ident);

            /* Write array dimensions and statement terminator */
            Visit(ast->arrayDims);
            Write(";");
        }
        EndLn();

        Blank();
    }
}

/* --- Declaration statements --- */

IMPLEMENT_VISIT_PROC(FunctionDecl)
{
    /* Is this function reachable from the entry point? */
    if (!ast->flags(AST::isReachable))
    {
        /* Check for valid control paths */
        if (ast->flags(FunctionDecl::hasNonReturnControlPath))
            Warning(R_InvalidControlPathInUnrefFunc(ast->ToString()), ast);
        return;
    }

    /* Check for valid control paths */
    if (ast->flags(FunctionDecl::hasNonReturnControlPath))
        Error(R_InvalidControlPathInFunc(ast->ToString()), ast);

    /* Write line */
    WriteLineMark(ast);

    /* Write function declaration */
    PushFunctionDecl(ast);
    {
        if (ast->flags(FunctionDecl::isEntryPoint))
            WriteFunctionEntryPoint(ast);
        else if (ast->flags(FunctionDecl::isSecondaryEntryPoint))
            WriteFunctionSecondaryEntryPoint(ast);
        else
            WriteFunction(ast);
    }
    PopFunctionDecl();

    Blank();
}

IMPLEMENT_VISIT_PROC(UniformBufferDecl)
{
    if (!ast->flags(AST::isReachable))
        return;

    if (versionOut_ < OutputShaderVersion::GLSL140)
    {
        /* Write individual uniforms */
        for (auto& varDeclStmnt : ast->varMembers)
        {
            varDeclStmnt->typeSpecifier->isUniform = true;
            Visit(varDeclStmnt);
        }
    }
    else
    {
        /* Write uniform buffer header */
        WriteLineMark(ast);

        /* Write uniform buffer declaration */
        BeginLn();

        WriteLayout(
            {
                [&]() { Write("std140"); },
                [&]() { WriteLayoutBinding(ast->slotRegisters); },
            }
        );

        Write(ast->ident);

        /* Write uniform buffer members */
        WriteScopeOpen(false, true);
        BeginSep();
        {
            PushUniformBufferDecl(ast);
            {
                Visit(ast->varMembers);
            }
            PopUniformBufferDecl();
        }
        EndSep();
        WriteScopeClose();
    }

    Blank();
}

IMPLEMENT_VISIT_PROC(BufferDeclStmnt)
{
    if (ast->flags(AST::isReachable))
    {
        /* Write buffer declarations */
        for (auto& bufferDecl : ast->bufferDecls)
            WriteBufferDecl(bufferDecl.get());
    }
}

IMPLEMENT_VISIT_PROC(SamplerDeclStmnt)
{
    if (IsVKSL() && ast->flags(AST::isReachable))
        Visit(ast->samplerDecls);
}

IMPLEMENT_VISIT_PROC(StructDeclStmnt)
{
    if (!ast->structDecl->flags(AST::isReachable))
        return;

    if (ast->structDecl->flags(StructDecl::isNonEntryPointParam) || !ast->structDecl->flags(StructDecl::isShaderInput | StructDecl::isShaderOutput))
    {
        WriteLineMark(ast);

        /* Visit structure declaration */
        StructDeclArgs structDeclArgs;
        structDeclArgs.inEndWithSemicolon = true;

        Visit(ast->structDecl, &structDeclArgs);

        if (structDeclArgs.outStructWritten)
            Blank();

        /* Visit all member functions */
        WriteStmntList(ast->structDecl->funcMembers);
    }
}

IMPLEMENT_VISIT_PROC(VarDeclStmnt)
{
    auto varDecls = ast->varDecls;

    //TODO: refactor this!
    #if 1
    for (auto it = varDecls.begin(); it != varDecls.end();)
    {
        auto var = it->get();
        const auto& baseVarType = var->GetTypeDenoter()->GetBase();

        StructDecl* structDecl = nullptr;
        if (auto structTypeDen = baseVarType.As<const StructTypeDenoter>())
            structDecl = structTypeDen->structDeclRef;

        /*
        First check if code generation is disabled for variable declaration,
        then check if this is a system value semantic inside an interface block.
        */
        if ( ( var->flags(VarDecl::isEntryPointLocal) && ( !structDecl || !structDecl->flags(StructDecl::isNonEntryPointParam) ) ) ||
             ( isInsideInterfaceBlock_ && var->semantic.IsSystemValue() ) )
        {
            /*
            Code generation is disabled for this variable declaration
            -> Remove this from the list
            */
            it = varDecls.erase(it);
        }
        else
            ++it;
    }

    if (varDecls.empty())
    {
        /*
        All variable declarations within this statement are disabled
        -> Break code generation here
        */
        return;
    }
    #endif

    BeginLn();

    /* Write storage classes and interpolation modifiers (must be before in/out keywords) */
    if (!InsideStructDecl())
    {
        WriteInterpModifiers(ast->typeSpecifier->interpModifiers, ast);
        WriteStorageClasses(ast->typeSpecifier->storageClasses, ast);
    }

    Separator();

    /* Write input modifiers */
    if (ast->flags(VarDeclStmnt::isShaderInput))
        Write("in ");
    else if (ast->flags(VarDeclStmnt::isShaderOutput))
        Write("out ");
    else if (ast->IsUniform())
        Write("uniform ");

    Separator();

    /* Write type modifiers */
    WriteTypeModifiersFrom(ast->typeSpecifier);
    Separator();

    /* Write variable type */
    if (ast->typeSpecifier->structDecl)
    {
        /* Do not end line here with "EndLn" */
        Visit(ast->typeSpecifier);
        BeginLn();
    }
    else
    {
        Visit(ast->typeSpecifier);
        Write(" ");
    }

    Separator();

    /* Write variable declarations */
    for (std::size_t i = 0; i < varDecls.size(); ++i)
    {
        Visit(varDecls[i]);
        if (i + 1 < varDecls.size())
            Write(", ");
    }

    Write(";");
    EndLn();
}

IMPLEMENT_VISIT_PROC(AliasDeclStmnt)
{
    if (ast->structDecl && !ast->structDecl->IsAnonymous())
    {
        WriteLineMark(ast);

        StructDeclArgs structDeclArgs;
        structDeclArgs.inEndWithSemicolon = true;

        Visit(ast->structDecl, &structDeclArgs);

        if (structDeclArgs.outStructWritten)
            Blank();
    }
}

/* --- Statements --- */

IMPLEMENT_VISIT_PROC(NullStmnt)
{
    WriteLn(";");
}

IMPLEMENT_VISIT_PROC(CodeBlockStmnt)
{
    Visit(ast->codeBlock);
}

IMPLEMENT_VISIT_PROC(ForLoopStmnt)
{
    /* Write loop header */
    BeginLn();
    
    Write("for (");

    PushOptions({ false, false });
    {
        if (ast->initStmnt->Type() == AST::Types::SamplerDeclStmnt && !IsVKSL())
            Write(";");
        else
            Visit(ast->initStmnt);
        Write(" "); // initStmnt already has the ';'!
        Visit(ast->condition);
        Write("; ");
        Visit(ast->iteration);
    }
    PopOptions();

    Write(")");

    WriteScopedStmnt(ast->bodyStmnt.get());
}

IMPLEMENT_VISIT_PROC(WhileLoopStmnt)
{
    /* Write loop condExpr */
    BeginLn();
    
    Write("while (");
    Visit(ast->condition);
    Write(")");

    WriteScopedStmnt(ast->bodyStmnt.get());
}

IMPLEMENT_VISIT_PROC(DoWhileLoopStmnt)
{
    BeginLn();

    Write("do");
    WriteScopedStmnt(ast->bodyStmnt.get());

    /* Write loop condExpr */
    WriteScopeContinue();
    
    Write("while (");
    Visit(ast->condition);
    Write(");");
    
    EndLn();
}

IMPLEMENT_VISIT_PROC(IfStmnt)
{
    bool hasElseParentNode = (args != nullptr ? reinterpret_cast<IfStmntArgs*>(args)->inHasElseParentNode : false);

    /* Write if condExpr */
    if (!hasElseParentNode)
        BeginLn();
    
    Write("if (");
    Visit(ast->condition);
    Write(")");
    
    /* Write if body */
    WriteScopedStmnt(ast->bodyStmnt.get());

    Visit(ast->elseStmnt);
}

IMPLEMENT_VISIT_PROC(ElseStmnt)
{
    if (ast->bodyStmnt->Type() == AST::Types::IfStmnt)
    {
        /* Write else if statement */
        WriteScopeContinue();
        Write("else ");

        if (ast->bodyStmnt->Type() == AST::Types::IfStmnt)
        {
            IfStmntArgs ifStmntArgs;
            ifStmntArgs.inHasElseParentNode = true;
            Visit(ast->bodyStmnt, &ifStmntArgs);
        }
        else
            Visit(ast->bodyStmnt);
    }
    else
    {
        /* Write else statement */
        WriteScopeContinue();
        Write("else");
        WriteScopedStmnt(ast->bodyStmnt.get());
    }
}

IMPLEMENT_VISIT_PROC(SwitchStmnt)
{
    /* Write selector */
    BeginLn();
    
    Write("switch (");
    Visit(ast->selector);
    Write(")");

    /* Write switch cases */
    WriteScopeOpen();
    {
        Visit(ast->cases);
    }
    WriteScopeClose();
}

IMPLEMENT_VISIT_PROC(ExprStmnt)
{
    BeginLn();
    {
        Visit(ast->expr);
        Write(";");
    }
    EndLn();
}

IMPLEMENT_VISIT_PROC(ReturnStmnt)
{
    if (InsideEntryPoint() || InsideSecondaryEntryPoint())
    {
        /* Write all output semantics assignment with the expression of the return statement */
        WriteOutputSemanticsAssignment(ast->expr.get());

        /* Is this return statement at the end of the function scope? */
        if (!ast->flags(ReturnStmnt::isEndOfFunction))
            WriteLn("return;");
    }
    else
    {
        if (ast->expr)
        {
            BeginLn();
            {
                Write("return ");
                Visit(ast->expr);
                Write(";");
            }
            EndLn();
        }
        else if (!ast->flags(ReturnStmnt::isEndOfFunction))
            WriteLn("return;");
    }
}

IMPLEMENT_VISIT_PROC(CtrlTransferStmnt)
{
    WriteLn(CtrlTransformToString(ast->transfer) + ";");
}

/* --- Expressions --- */

IMPLEMENT_VISIT_PROC(ListExpr)
{
    Visit(ast->firstExpr);
    Write(", ");
    Visit(ast->nextExpr);
}

IMPLEMENT_VISIT_PROC(LiteralExpr)
{
    Write(ast->value);
}

IMPLEMENT_VISIT_PROC(TypeSpecifierExpr)
{
    WriteTypeDenoter(*ast->typeSpecifier->typeDenoter, false, ast);
}

IMPLEMENT_VISIT_PROC(TernaryExpr)
{
    Visit(ast->condExpr);
    Write(" ? ");
    Visit(ast->thenExpr);
    Write(" : ");
    Visit(ast->elseExpr);
}

IMPLEMENT_VISIT_PROC(BinaryExpr)
{
    Visit(ast->lhsExpr);
    Write(" " + BinaryOpToString(ast->op) + " ");
    Visit(ast->rhsExpr);
}

IMPLEMENT_VISIT_PROC(UnaryExpr)
{
    Write(UnaryOpToString(ast->op));
    Visit(ast->expr);
}

IMPLEMENT_VISIT_PROC(PostUnaryExpr)
{
    Visit(ast->expr);
    Write(UnaryOpToString(ast->op));
}

IMPLEMENT_VISIT_PROC(FunctionCallExpr)
{
    Visit(ast->call);
}

IMPLEMENT_VISIT_PROC(BracketExpr)
{
    Write("(");
    Visit(ast->expr);
    Write(")");
}

IMPLEMENT_VISIT_PROC(SuffixExpr)
{
    Visit(ast->expr);
    Write(".");
    Visit(ast->varIdent);
}

IMPLEMENT_VISIT_PROC(ArrayAccessExpr)
{
    Visit(ast->expr);
    WriteArrayIndices(ast->arrayIndices);
}

IMPLEMENT_VISIT_PROC(CastExpr)
{
    WriteTypeDenoter(*ast->typeSpecifier->typeDenoter, false, ast);
    Write("(");
    Visit(ast->expr);
    Write(")");
}

IMPLEMENT_VISIT_PROC(VarAccessExpr)
{
    if (ast->varIdent->flags(VarIdent::isImmutable))
        Visit(ast->varIdent);
    else
        WriteVarIdentOrSystemValue(ast->varIdent.get());
    
    if (ast->assignExpr)
    {
        Write(" " + AssignOpToString(ast->assignOp) + " ");
        Visit(ast->assignExpr);
    }
}

IMPLEMENT_VISIT_PROC(InitializerExpr)
{
    Write("{ ");
        
    for (std::size_t i = 0; i < ast->exprs.size(); ++i)
    {
        Visit(ast->exprs[i]);
        if (i + 1 < ast->exprs.size())
            Write(", ");
    }

    Write(" }");
}

#undef IMPLEMENT_VISIT_PROC

/* --- Helper functions for code generation --- */

/* --- Basics --- */

void GLSLGenerator::WriteComment(const std::string& text)
{
    std::size_t start = 0, end = 0;

    while (end < text.size())
    {
        /* Get next comment line */
        end = text.find('\n', start);

        auto line = (end < text.size() ? text.substr(start, end - start) : text.substr(start));

        #if 0
        /* Get line boundaries */
        bool firstLine  = (start == 0);
        bool lastLine   = (end == std::string::npos);
        #endif

        /* Write comment line */
        BeginLn();
        {
            Write("// ");
            Write(line);
        }
        EndLn();

        start = end + 1;
    }
}

void GLSLGenerator::WriteLineMark(int lineNumber)
{
    if (allowLineMarks_)
        WriteLn("#line " + std::to_string(lineNumber));
}

void GLSLGenerator::WriteLineMark(const TokenPtr& tkn)
{
    WriteLineMark(tkn->Pos().Row());
}

void GLSLGenerator::WriteLineMark(const AST* ast)
{
    WriteLineMark(ast->area.Pos().Row());
}

/* --- Program --- */

void GLSLGenerator::WriteProgramHeader()
{
    try
    {
        /* Determine all required GLSL extensions with the GLSL extension agent */
        GLSLExtensionAgent extensionAgent;
        auto requiredExtensions = extensionAgent.DetermineRequiredExtensions(
            *GetProgram(), versionOut_, GetShaderTarget(), allowExtensions_, explicitBinding_
        );

        /* Write GLSL version */
        WriteProgramHeaderVersion();
        Blank();

        /* Write all required extensions */
        if (!requiredExtensions.empty())
        {
            for (const auto& ext : requiredExtensions)
                WriteProgramHeaderExtension(ext);
            Blank();
        }
    }
    catch (const std::exception& e)
    {
        Error(e.what());
    }
}

void GLSLGenerator::WriteProgramHeaderVersion()
{
    /* Convert output shader version into GLSL version number (with bitwise AND operator) */
    int versionNumber = (static_cast<int>(versionOut_)) & static_cast<int>(OutputShaderVersion::GLSL);
    WriteLn("#version " + std::to_string(versionNumber));
}

void GLSLGenerator::WriteProgramHeaderExtension(const std::string& extensionName)
{
    WriteLn("#extension " + extensionName + " : enable");// "require" or "enable"
}

/* --- Layouts --- */

void GLSLGenerator::WriteGlobalLayouts()
{
    auto program = GetProgram();

    bool layoutsWritten = false;

    switch (GetShaderTarget())
    {
        case ShaderTarget::TessellationControlShader:
            layoutsWritten = WriteGlobalLayoutsTessControl(program->layoutTessControl);
            break;
        case ShaderTarget::TessellationEvaluationShader:
            layoutsWritten = WriteGlobalLayoutsTessEvaluation(program->layoutTessEvaluation);
            break;
        case ShaderTarget::GeometryShader:
            layoutsWritten = WriteGlobalLayoutsGeometry(program->layoutGeometry);
            break;
        case ShaderTarget::FragmentShader:
            layoutsWritten = WriteGlobalLayoutsFragment(program->layoutFragment);
            break;
        case ShaderTarget::ComputeShader:
            layoutsWritten = WriteGlobalLayoutsCompute(program->layoutCompute);
            break;
        default:
            break;
    }

    if (layoutsWritten)
        Blank();
}

bool GLSLGenerator::WriteGlobalLayoutsTessControl(const Program::LayoutTessControlShader& layout)
{
    WriteLayoutGlobalIn(
        {
            [&]() { Write("vertices = " + std::to_string(layout.outputControlPoints)); },
        }
    );
    return true;
}

bool GLSLGenerator::WriteGlobalLayoutsTessEvaluation(const Program::LayoutTessEvaluationShader& layout)
{
    WriteLayoutGlobalIn(
        {
            [&]()
            {
                /* Map GLSL domain type (abstract patch type) */
                if (auto keyword = AttributeValueToGLSLKeyword(layout.domainType))
                    Write(*keyword);
                else
                    Error(R_FailedToMapToGLSLKeyword(R_DomainType, R_TessAbstractPatchType));
            },

            [&]()
            {
                if (IsAttributeValuePartitioning(layout.partitioning))
                {
                    /* Map GLSL partitioning (spacing) */
                    if (auto keyword = AttributeValueToGLSLKeyword(layout.partitioning))
                        Write(*keyword);
                    else
                        Error(R_FailedToMapToGLSLKeyword(R_Partitioning, R_TessSpacing));
                }
            },

            [&]()
            {
                if (IsAttributeValueTrianglePartitioning(layout.outputTopology))
                {
                    /* Map GLSL output topology (primitive ordering) */
                    if (auto keyword = AttributeValueToGLSLKeyword(layout.outputTopology))
                        Write(*keyword);
                    else
                        Error(R_FailedToMapToGLSLKeyword(R_OutputToplogy, R_TessPrimitiveOrdering));
                }
            },
        }
    );
    return true;
}

bool GLSLGenerator::WriteGlobalLayoutsGeometry(const Program::LayoutGeometryShader& layout)
{
    /* Write input layout */
    WriteLayoutGlobalIn(
        {
            [&]()
            {
                /* Map GLSL input primitive */
                if (layout.inputPrimitive == PrimitiveType::Undefined)
                    Error(R_MissingInputPrimitiveType(R_GeometryShader));
                else if (auto keyword = PrimitiveTypeToGLSLKeyword(layout.inputPrimitive))
                    Write(*keyword);
                else
                    Error(R_FailedToMapToGLSLKeyword(R_InputGeometryPrimitive));
            },
        }
    );

    /* Write output layout */
    WriteLayoutGlobalOut(
        {
            [&]()
            {
                /* Map GLSL output primitive */
                if (layout.outputPrimitive == BufferType::Undefined)
                    Error(R_MissingOutputPrimitiveType(R_GeometryShader));
                else if (auto keyword = BufferTypeToGLSLKeyword(layout.outputPrimitive))
                    Write(*keyword);
                else
                    Error(R_FailedToMapToGLSLKeyword(R_OutputGeometryPrimitive));
            },

            [&]()
            {
                Write("max_vertices = " + std::to_string(layout.maxVertices));
            },
        }
    );

    return true;
}

bool GLSLGenerator::WriteGlobalLayoutsFragment(const Program::LayoutFragmentShader& layout)
{
    bool layoutsWritten = false;

    /* Define 'gl_FragCoord' origin to upper-left (not required for Vulkan) */
    if (!IsVKSL() && GetProgram()->layoutFragment.fragCoordUsed)
    {
        WriteLayoutGlobalIn(
            {
                [&]()
                {
                    Write("origin_upper_left");
                },

                [&]()
                {
                    if (layout.pixelCenterInteger)
                        Write("pixel_center_integer");
                },
            },
            [&]()
            {
                Write("vec4 gl_FragCoord");
            }
        );
        layoutsWritten = true;
    }

    if (layout.earlyDepthStencil)
    {
        WriteLayoutGlobalIn(
            {
                [&]() { Write("early_fragment_tests"); }
            }
        );
        layoutsWritten = true;
    }

    return layoutsWritten;
}

bool GLSLGenerator::WriteGlobalLayoutsCompute(const Program::LayoutComputeShader& layout)
{
    WriteLayoutGlobalIn(
        {
            [&]() { Write("local_size_x = " + std::to_string(layout.numThreads[0])); },
            [&]() { Write("local_size_y = " + std::to_string(layout.numThreads[1])); },
            [&]() { Write("local_size_z = " + std::to_string(layout.numThreads[2])); },
        }
    );
    return true;
}

/* --- Input semantics --- */

void GLSLGenerator::WriteLocalInputSemantics(FunctionDecl* entryPoint)
{
    entryPoint->inputSemantics.ForEach(
        [this](VarDecl* varDecl)
        {
            if (varDecl->flags(VarDecl::isWrittenTo))
                WriteLocalInputSemanticsVarDecl(varDecl);
        }
    );

    for (auto& param : entryPoint->parameters)
    {
        if (auto typeSpecifier = param->typeSpecifier->GetTypeDenoter()->Get())
        {
            if (auto structTypeDen = typeSpecifier->As<StructTypeDenoter>())
                WriteLocalInputSemanticsStructDeclParam(param.get(), structTypeDen->structDeclRef);
        }
    }
}

void GLSLGenerator::WriteLocalInputSemanticsVarDecl(VarDecl* varDecl)
{
    /* Is semantic of the variable declaration a system value semantic? */
    auto semanticKeyword = SystemValueToKeyword(varDecl->semantic);

    if (!semanticKeyword)
    {
        semanticKeyword = MakeUnique<std::string>(varDecl->ident);
        varDecl->ident.AppendPrefix(nameMangling_.temporaryPrefix);
    }

    /* Write local variable definition statement */
    BeginLn();
    {
        /* Write desired variable type and identifier */
        auto typeSpecifier = varDecl->declStmntRef->typeSpecifier.get();

        Visit(typeSpecifier);
        Write(" " + varDecl->ident + " = ");

        /* Is a type conversion required? */
        if (!IsTypeCompatibleWithSemantic(varDecl->semantic, *typeSpecifier->typeDenoter->Get()))
        {
            /* Write type cast with semantic keyword */
            Visit(typeSpecifier);
            Write("(" + *semanticKeyword + ");");
        }
        else
        {
            /* Write semantic keyword */
            Write(*semanticKeyword + ";");
        }
    }
    EndLn();
}

void GLSLGenerator::WriteLocalInputSemanticsStructDeclParam(VarDeclStmnt* param, StructDecl* structDecl)
{
    if (structDecl && structDecl->flags(StructDecl::isNonEntryPointParam) && structDecl->flags(StructDecl::isShaderInput))
    {
        /* Write parameter as variable declaration */
        Visit(param);

        BeginSep();
        {
            /* Write global shader input to local variable assignments */
            auto paramVar = param->varDecls.front().get();
        
            if (paramVar->arrayDims.empty())
            {
                structDecl->ForEachVarDecl(
                    [&](VarDeclPtr& varDecl)
                    {
                        BeginLn();
                        {
                            Separator();
                            Write(paramVar->ident + "." + varDecl->ident.Original());
                            Separator();
                            Write(" = ");
                            WriteVarDeclIdentOrSystemValue(varDecl.get());
                            Write(";");
                        }
                        EndLn();
                    }
                );
            }
            else if (paramVar->arrayDims.size() == 1)
            {
                /* Get array dimension sizes from parameter */
                auto arraySize = paramVar->arrayDims.front()->size;

                for (int i = 0; i < arraySize; ++i)
                {
                    /* Construct array indices output string */
                    structDecl->ForEachVarDecl(
                        [&](VarDeclPtr& varDecl)
                        {
                            BeginLn();
                            {
                                Separator();
                                Write(paramVar->ident + "[" + std::to_string(i) + "]." + varDecl->ident.Original());
                                Separator();
                                Write(" = ");
                                WriteVarDeclIdentOrSystemValue(varDecl.get(), i);
                                Write(";");
                            }
                            EndLn();
                        }
                    );
                }
            }
            else
                Error(R_TooManyIndicesForShaderInputParam, paramVar);
        }
        EndSep();
    }
}

void GLSLGenerator::WriteGlobalInputSemantics(FunctionDecl* entryPoint)
{
    auto& varDeclRefs = entryPoint->inputSemantics.varDeclRefs;

    for (auto varDecl : varDeclRefs)
        WriteGlobalInputSemanticsVarDecl(varDecl);

    if (!varDeclRefs.empty())
        Blank();
}

void GLSLGenerator::WriteGlobalInputSemanticsVarDecl(VarDecl* varDecl)
{
    /* Write global variable definition statement */
    BeginLn();
    {
        const auto& interpModifiers = varDecl->declStmntRef->typeSpecifier->interpModifiers;

        if (versionOut_ <= OutputShaderVersion::GLSL120)
        {
            if (!interpModifiers.empty())
                Warning(R_InterpModNotSupportedForGLSL120, varDecl);

            if (IsVertexShader())
                Write("attribute ");
            else
                Write("varying ");
            Separator();
        }
        else
        {
            WriteInterpModifiers(interpModifiers, varDecl->declStmntRef);
            Separator();

            if (explicitBinding_ && IsVertexShader() && varDecl->semantic.IsValid())
            {
                auto it = vertexSemanticsMap_.find(ToCiString(varDecl->semantic.ToString()));
                if (it != vertexSemanticsMap_.end())
                {
                    /* Write layout location and increment use count for warning-feedback */
                    WriteLayout(
                        {
                            [&]() { Write("location = " + std::to_string(it->second.location)); }
                        }
                    );
                    it->second.found = true;
                }
            }

            Separator();
            Write("in ");
            Separator();
        }

        Visit(varDecl->declStmntRef->typeSpecifier);
        Separator();

        Write(" " + varDecl->ident);

        if (varDecl->flags(VarDecl::isDynamicArray))
            Write("[]");

        Write(";");
    }
    EndLn();
}

/* --- Output semantics --- */

void GLSLGenerator::WriteLocalOutputSemantics(FunctionDecl* entryPoint)
{
    //TODO: maybe remove this??? (currently unused)
    #if 0
    entryPoint->outputSemantics.ForEach(
        [this](VarDecl* varDecl)
        {
            if (varDecl->flags(VarDecl::isWrittenTo))
                WriteLocalOutputSemanticsVarDecl(varDecl);
        }
    );
    #endif

    for (auto& param : entryPoint->parameters)
    {
        if (auto typeSpecifier = param->typeSpecifier->GetTypeDenoter()->Get())
        {
            if (auto structTypeDen = typeSpecifier->As<StructTypeDenoter>())
                WriteLocalOutputSemanticsStructDeclParam(param.get(), structTypeDen->structDeclRef);
        }
    }
}

void GLSLGenerator::WriteLocalOutputSemanticsVarDecl(VarDecl* varDecl)
{
    /* Write local variable definition statement (without initialization) */
    BeginLn();
    {
        Visit(varDecl->declStmntRef->typeSpecifier);
        Write(" " + varDecl->ident + ";");
    }
    EndLn();
}

void GLSLGenerator::WriteLocalOutputSemanticsStructDeclParam(VarDeclStmnt* param, StructDecl* structDecl)
{
    if (structDecl && structDecl->flags(StructDecl::isNonEntryPointParam) && structDecl->flags(StructDecl::isShaderOutput))
    {
        /* Write parameter as variable declaration */
        Visit(param);
    }
}

void GLSLGenerator::WriteGlobalOutputSemantics(FunctionDecl* entryPoint)
{
    /* Write non-system-value output semantics */
    auto& varDeclRefs = entryPoint->outputSemantics.varDeclRefs;

    bool paramsWritten = (!varDeclRefs.empty());

    for (auto varDecl : varDeclRefs)
        WriteGlobalOutputSemanticsVarDecl(varDecl);

    /* Write 'SV_Target' system-value output semantics */
    if (IsFragmentShader() && versionOut_ > OutputShaderVersion::GLSL120)
    {
        /* Write 'SV_Target' system-value output semantics from variables */
        auto& varDeclRefs = entryPoint->outputSemantics.varDeclRefsSV;

        for (auto varDecl : varDeclRefs)
        {
            if (varDecl->semantic == Semantic::Target)
            {
                WriteGlobalOutputSemanticsVarDecl(varDecl, true);
                paramsWritten = true;
            }
        }

        if (entryPoint->semantic == Semantic::Target)
        {
            /* Write 'SV_Target' system-value output semantic from entry point return semantic */
            WriteGlobalOutputSemanticsSlot(
                entryPoint->returnType.get(),
                entryPoint->semantic,
                entryPoint->semantic.ToString()
            );
            paramsWritten = true;
        }
    }

    if (entryPoint->semantic.IsUserDefined())
    {
        /* Write user-defined output semantic from entry point return semantic */
        WriteGlobalOutputSemanticsSlot(
            entryPoint->returnType.get(),
            entryPoint->semantic,
            nameMangling_.outputPrefix + entryPoint->semantic.ToString()
        );
        paramsWritten = true;
    }

    if (paramsWritten)
        Blank();
}

void GLSLGenerator::WriteGlobalOutputSemanticsVarDecl(VarDecl* varDecl, bool useSemanticName)
{
    /* Write global variable definition statement */
    WriteGlobalOutputSemanticsSlot(
        varDecl->declStmntRef->typeSpecifier.get(),
        varDecl->semantic,
        (useSemanticName ? varDecl->semantic.ToString() : varDecl->ident.Final()),
        varDecl
    );
}

void GLSLGenerator::WriteGlobalOutputSemanticsSlot(TypeSpecifier* typeSpecifier, const IndexedSemantic& semantic, const std::string& ident, VarDecl* varDecl)
{
    /* Write global output semantic slot */
    BeginLn();
    {
        VarDeclStmnt* varDeclStmnt = (varDecl != nullptr ? varDecl->declStmntRef : nullptr);

        if (versionOut_ <= OutputShaderVersion::GLSL120)
        {
            if (varDeclStmnt && !varDeclStmnt->typeSpecifier->interpModifiers.empty())
                Warning(R_InterpModNotSupportedForGLSL120, varDecl);

            Write("varying ");
            Separator();
        }
        else
        {
            if (varDeclStmnt)
                WriteInterpModifiers(varDeclStmnt->typeSpecifier->interpModifiers, varDecl);
            Separator();

            if (semantic.IsSystemValue() && explicitBinding_)
            {
                WriteLayout(
                    {
                        [&]() { Write("location = " + std::to_string(semantic.Index())); }
                    }
                );
            }

            Write("out ");
            Separator();
        }

        Visit(typeSpecifier);
        Separator();

        Write(" " + ident);

        if (varDecl && varDecl->flags(VarDecl::isDynamicArray))
            Write("[]");

        Write(";");
    }
    EndLn();
}

void GLSLGenerator::WriteOutputSemanticsAssignment(Expr* expr, bool writeAsListedExpr)
{
    auto entryPoint = GetProgram()->entryPointRef;

    /* Fetch variable identifier if expression is set */
    VarIdent* exprVarIdent = nullptr;
    if (expr)
        exprVarIdent = expr->FetchVarIdent();

    /* Write wrapped structures */
    for (const auto& paramStruct : entryPoint->paramStructs)
    {
        if (paramStruct.varIdent == nullptr || paramStruct.varIdent == exprVarIdent)
            WriteOutputSemanticsAssignmentStructDeclParam(paramStruct, writeAsListedExpr);
    }

    /* Write assignment to single function return semantic */
    auto semantic = entryPoint->semantic;

    if (expr)
    {
        if (semantic.IsValid())
        {
            if (semantic.IsSystemValue())
            {
                if (auto semanticKeyword = SystemValueToKeyword(semantic))
                {
                    BeginLn();
                    {
                        Write(*semanticKeyword);
                        Write(" = ");
                        Visit(expr);
                        Write(";");
                    }
                    EndLn();
                }
                else
                    Error(R_FailedToMapToGLSLKeyword(R_OutputSemantic), entryPoint);
            }
            else if (semantic.IsUserDefined())
            {
                BeginLn();
                {
                    Write(nameMangling_.outputPrefix + semantic.ToString());
                    Write(" = ");
                    Visit(expr);
                    Write(";");
                }
                EndLn();
            }
        }
        else if (entryPoint->paramStructs.empty())
        {
            /* Store result in temporary variable */
            const auto tempVarIdent = nameMangling_.temporaryPrefix + "output";

            BeginLn();
            {
                Visit(entryPoint->returnType);
                Write(" " + tempVarIdent + " = ");
                Visit(expr);
                Write(";");
            }
            EndLn();

            if (auto structDecl = entryPoint->returnType->GetStructDeclRef())
                WriteOutputSemanticsAssignmentStructDeclParam({ nullptr, nullptr, structDecl }, writeAsListedExpr, tempVarIdent);
        }
    }
}

void GLSLGenerator::WriteOutputSemanticsAssignmentStructDeclParam(
    const FunctionDecl::ParameterStructure& paramStruct, bool writeAsListedExpr, const std::string& tempVarIdent)
{
    auto paramIdent = paramStruct.varIdent;
    auto paramVar = paramStruct.varDecl;
    auto structDecl = paramStruct.structDecl;

    if (structDecl && structDecl->flags(StructDecl::isNonEntryPointParam) && structDecl->flags(StructDecl::isShaderOutput))
    {
        /* Write global shader input to local variable assignments */
        structDecl->ForEachVarDecl(
            [&](VarDeclPtr& varDecl)
            {
                auto openLine = IsOpenLine();
                if (!writeAsListedExpr && !openLine)
                    BeginLn();

                if (auto semanticKeyword = SystemValueToKeyword(varDecl->semantic))
                    Write(*semanticKeyword);
                else
                    Write(varDecl->ident);

                Write(" = ");

                if (paramIdent)
                    Visit(paramIdent);
                else if (paramVar)
                    Write(paramVar->ident);
                else
                    Write(tempVarIdent);

                Write("." + varDecl->ident + (writeAsListedExpr ? ", " : ";"));

                if (!writeAsListedExpr)
                {
                    EndLn();
                    if (openLine)
                        BeginLn();
                }
            }
        );
    }
}

/* --- Uniforms --- */

void GLSLGenerator::WriteGlobalUniforms()
{
    bool uniformsWritten = false;

    for (auto& param : GetProgram()->entryPointRef->parameters)
    {
        if (param->IsUniform())
        {
            WriteGlobalUniformsParameter(param.get());
            uniformsWritten = true;
        }
    }

    if (uniformsWritten)
        Blank();
}

void GLSLGenerator::WriteGlobalUniformsParameter(VarDeclStmnt* param)
{
    /* Write uniform type */
    BeginLn();
    {
        Write("uniform ");
        Visit(param->typeSpecifier);
        Write(" ");

        /* Write parameter identifier */
        if (param->varDecls.size() == 1)
            Visit(param->varDecls.front());
        else
            Error(R_InvalidParamVarCount, param);

        Write(";");
    }
    EndLn();
}

/* --- VarIdent --- */

/*
Find the first VarIdent with a system value semantic,
and keep the remaining AST nodes (i.e. ast->next) which might be vector subscriptions (e.g. "gl_Position.xyz").
*/
VarIdent* GLSLGenerator::FindSystemValueVarIdent(VarIdent* varIdent)
{
    while (varIdent)
    {
        /* Check if current var-ident AST node has a system semantic */
        if (SystemValueToKeyword(varIdent->FetchSemantic()) != nullptr)
            return varIdent;

        /* Search in next var-ident AST node */
        varIdent = varIdent->next.get();
    }
    return nullptr;
}

const std::string& GLSLGenerator::FinalIdentFromVarIdent(VarIdent* varIdent)
{
    /* Check if a function declaration has changed it's name during conversion */
    if (auto funcDecl = varIdent->FetchFunctionDecl())
        return funcDecl->ident;

    /* Check if a declaration object (variable, structure, sampler, buffer) has changed it's name during conversion */
    if (auto obj = varIdent->FetchDecl())
        return obj->ident;

    /* Return default identifier */
    return varIdent->ident;
}

void GLSLGenerator::WriteVarIdent(VarIdent* varIdent, bool recursive, bool originalIdent)
{
    /* Write identifier */
    Write(originalIdent ? varIdent->ident : FinalIdentFromVarIdent(varIdent));

    /* Write array index expressions */
    WriteArrayIndices(varIdent->arrayIndices);

    if (recursive && varIdent->next)
    {
        Write(".");
        WriteVarIdent(varIdent->next.get(), true, true);
    }
}

/*
Writes either the variable identifier as it is (e.g. "vertexOutput.position.xyz"),
or a system value if the identifier has a system value semantix (e.g. "gl_Position.xyz").
*/
void GLSLGenerator::WriteVarIdentOrSystemValue(VarIdent* varIdent)
{
    /* Find system value semantic in variable identifier */
    auto semanticVarIdent = FindSystemValueVarIdent(varIdent);

    std::unique_ptr<std::string> semanticKeyword;
    Flags varFlags;

    if (semanticVarIdent)
    {
        if (auto varDecl = semanticVarIdent->FetchVarDecl())
        {
            /* Copy flags from variable */
            varFlags = varDecl->flags;

            /* Is this variable an entry-point output semantic, or an r-value? */
            if (GetProgram()->entryPointRef->outputSemantics.Contains(varDecl) || !varDecl->flags(VarDecl::isWrittenTo))
                semanticKeyword = SystemValueToKeyword(varDecl->semantic);
        }
    }

    if (semanticVarIdent && semanticKeyword)
    {
        /* Write "gl_in[]" or "gl_out[]" in front of identifier */
        if (!varIdent->arrayIndices.empty())
        {
            if (varFlags(VarDecl::isShaderInput))
                Write("gl_in");
            else
                Write("gl_out");
            WriteArrayIndices(varIdent->arrayIndices);
            Write(".");
        }

        /* Write shader target respective system semantic */
        Write(*semanticKeyword);

        if (semanticVarIdent->next)
        {
            Write(".");
            Visit(semanticVarIdent->next);
        }
    }
    else
    {
        /* Write default variable identifier */
        Visit(varIdent);
    }
}

void GLSLGenerator::WriteVarDeclIdentOrSystemValue(VarDecl* varDecl, int arrayIndex)
{
    /* Find system value semantic in variable identifier */
    if (auto semanticVarIdent = SystemValueToKeyword(varDecl->semantic))
    {
        if (arrayIndex >= 0)
        {
            if (varDecl->flags(VarDecl::isShaderInput))
                Write("gl_in");
            else
                Write("gl_out");
            Write("[" + std::to_string(arrayIndex) + "].");
        }
        Write(*semanticVarIdent);
    }
    else
    {
        Write(varDecl->ident);
        if (arrayIndex >= 0)
            Write("[" + std::to_string(arrayIndex) + "]");
    }
}

/* --- Type denoter --- */

void GLSLGenerator::WriteStorageClasses(const std::set<StorageClass>& storageClasses, const AST* ast)
{
    for (auto storage : storageClasses)
    {
        if (auto keyword = StorageClassToGLSLKeyword(storage))
            Write(*keyword + " ");
        else
            Warning(R_NotAllStorageClassesMappedToGLSL, ast);
    }
}

void GLSLGenerator::WriteInterpModifiers(const std::set<InterpModifier>& interpModifiers, const AST* ast)
{
    for (auto modifier : interpModifiers)
    {
        if (auto keyword = InterpModifierToGLSLKeyword(modifier))
            Write(*keyword + " ");
        else
            Warning(R_NotAllInterpModMappedToGLSL, ast);
    }
}

void GLSLGenerator::WriteTypeModifiers(const std::set<TypeModifier>& typeModifiers, const TypeDenoterPtr& typeDenoter)
{
    /* Matrix packing alignment can only be written for uniform buffers */
    if (InsideUniformBufferDecl() && typeDenoter && typeDenoter->IsMatrix())
    {
        /* Only write 'row_major' type modifier (column major is the default) */
        if (typeModifiers.find(TypeModifier::RowMajor) != typeModifiers.end())
            WriteLayout("row_major");
    }

    /* Write const type modifier */
    if (typeModifiers.find(TypeModifier::Const) != typeModifiers.end())
        Write("const ");
}

void GLSLGenerator::WriteTypeModifiersFrom(const TypeSpecifierPtr& typeSpecifier)
{
    WriteTypeModifiers(typeSpecifier->typeModifiers, typeSpecifier->GetTypeDenoter()->Get());
}

void GLSLGenerator::WriteDataType(DataType dataType, bool writePrecisionSpecifier, const AST* ast)
{
    /* Replace doubles with floats, if doubles are not supported */
    if (versionOut_ < OutputShaderVersion::GLSL400)
        dataType = DoubleToFloatDataType(dataType);

    /* Write optional precision specifier */
    if (writePrecisionSpecifier)
    {
        if (IsHalfRealType(dataType))
            Write("mediump ");
        else
            Write("highp ");
    }

    /* Map GLSL data type */
    if (auto keyword = DataTypeToGLSLKeyword(dataType))
        Write(*keyword);
    else
        Error(R_FailedToMapToGLSLKeyword(R_DataType), ast);
}

void GLSLGenerator::WriteTypeDenoter(const TypeDenoter& typeDenoter, bool writePrecisionSpecifier, const AST* ast)
{
    try
    {
        if (typeDenoter.IsVoid())
        {
            /* Just write void type */
            Write("void");
        }
        else if (auto baseTypeDen = typeDenoter.As<BaseTypeDenoter>())
        {
            /* Map GLSL base type */
            WriteDataType(baseTypeDen->dataType, writePrecisionSpecifier, ast);
        }
        else if (auto bufferTypeDen = typeDenoter.As<BufferTypeDenoter>())
        {
            /* Get buffer type */
            auto bufferType = bufferTypeDen->bufferType;
            if (bufferType == BufferType::Undefined)
            {
                if (auto bufferDecl = bufferTypeDen->bufferDeclRef)
                    bufferType = bufferDecl->GetBufferType();
                else
                    Error(R_MissingRefInTypeDen(R_BufferTypeDen), ast);
            }

            /* Convert buffer type to GLSL buffer (or sampler type) */
            if (auto keyword = BufferTypeToKeyword(bufferType, ast))
                Write(*keyword);
        }
        else if (auto samplerTypeDen = typeDenoter.As<SamplerTypeDenoter>())
        {
            /* Get sampler type */
            auto samplerType = samplerTypeDen->samplerType;
            if (samplerType == SamplerType::Undefined)
            {
                if (auto samplerDecl = samplerTypeDen->samplerDeclRef)
                    samplerType = samplerDecl->GetSamplerType();
                else
                    Error(R_MissingRefInTypeDen(R_SamplerTypeDen), ast);
            }

            if (!IsSamplerStateType(samplerType) || IsVKSL())
            {
                /* Convert sampler type to GLSL sampler type */
                if (auto keyword = SamplerTypeToKeyword(samplerType, ast))
                    Write(*keyword);
            }
            else
                Error(R_CantTranslateSamplerToGLSL, ast);
        }
        else if (auto structTypeDen = typeDenoter.As<StructTypeDenoter>())
        {
            /* Write struct identifier (either from structure declaration or stored identifier) */
            if (auto structDecl = structTypeDen->structDeclRef)
                Write(structDecl->ident);
            else
                Write(typeDenoter.Ident());
        }
        else if (typeDenoter.IsAlias())
        {
            /* Write aliased type denoter */
            WriteTypeDenoter(typeDenoter.GetAliased(), writePrecisionSpecifier, ast);
        }
        else if (auto arrayTypeDen = typeDenoter.As<ArrayTypeDenoter>())
        {
            /* Write array type denoter */
            WriteTypeDenoter(*arrayTypeDen->baseTypeDenoter, writePrecisionSpecifier, ast);
            Visit(arrayTypeDen->arrayDims);
        }
        else
            Error(R_FailedToDetermineGLSLDataType, ast);
    }
    catch (const Report& e)
    {
        throw e;
    }
    catch (const std::exception& e)
    {
        Error(e.what(), ast);
    }
}

/* --- Function declaration --- */

void GLSLGenerator::WriteFunction(FunctionDecl* ast)
{
    /* Write function header */
    if (auto structDecl = ast->returnType->structDecl.get())
    {
        Visit(ast->returnType);
        Blank();
        BeginLn();
        Write(structDecl->ident + " " + ast->ident + "(");
    }
    else
    {
        BeginLn();
        Visit(ast->returnType);
        Write(" " + ast->ident + "(");
    }

    /* Write parameters */
    for (std::size_t i = 0; i < ast->parameters.size(); ++i)
    {
        WriteParameter(ast->parameters[i].get());
        if (i + 1 < ast->parameters.size())
            Write(", ");
    }

    Write(")");

    if (ast->codeBlock)
    {
        /* Write function body */
        Visit(ast->codeBlock);
    }
    else
    {
        /* This is only a function forward declaration, so finish with statement terminator */
        Write(";");
        EndLn();
    }
}

void GLSLGenerator::WriteFunctionEntryPoint(FunctionDecl* ast)
{
    if (ast->IsForwardDecl())
        return;

    /* Write function header */
    BeginLn();
    Write("void main()");

    /* Write function body */
    WriteScopeOpen();
    {
        if (IsTessControlShader())
        {
            //TODO:
            // THIS IS INCOMPLETE!!!
            // more work is to do, to translate the patch constant function to GLSL!)
            if (auto patchConstFunc = GetProgram()->layoutTessControl.patchConstFunctionRef)
            {
                /* Call patch constant function inside main entry point only for the first invocation */
                WriteLn("if (gl_InvocationID == 0)");
                IncIndent();
                {
                    WriteLn(patchConstFunc->ident + "();");
                }
                DecIndent();
                Blank();
            }
        }

        WriteFunctionEntryPointBody(ast);
    }
    WriteScopeClose();
}

void GLSLGenerator::WriteFunctionEntryPointBody(FunctionDecl* ast)
{
    /* Write input/output parameters of system values as local variables */
    WriteLocalInputSemantics(ast);
    WriteLocalOutputSemantics(ast);

    /* Write code block (without additional scope) */
    WriteStmntList(ast->codeBlock->stmnts);

    /* Is the last statement a return statement? (ignore if the function has a non-void return type) */
    if ( ast->HasVoidReturnType() && ( ast->codeBlock->stmnts.empty() || ast->codeBlock->stmnts.back()->Type() != AST::Types::ReturnStmnt ) )
    {
        /* Write output semantic at the end of the code block, if no return statement was written before */
        WriteOutputSemanticsAssignment(nullptr);
    }
}

void GLSLGenerator::WriteFunctionSecondaryEntryPoint(FunctionDecl* ast)
{
    if (ast->IsForwardDecl())
        return;

    /* Write function header */
    BeginLn();
    Write("void " + ast->ident + "()");

    /* Write function body */
    WriteScopeOpen();
    {
        WriteFunctionEntryPointBody(ast);
    }
    WriteScopeClose();
}

/* --- Function call --- */

void GLSLGenerator::AssertIntrinsicNumArgs(FunctionCall* funcCall, std::size_t numArgsMin, std::size_t numArgsMax)
{
    auto numArgs = funcCall->arguments.size();
    if (numArgs < numArgsMin || numArgs > numArgsMax)
        Error(R_InvalidIntrinsicArgCount(funcCall->varIdent->Last()->ident), funcCall);
}

void GLSLGenerator::WriteFunctionCallStandard(FunctionCall* funcCall)
{
    /* Write function name */
    if (funcCall->varIdent)
    {
        if (funcCall->intrinsic != Intrinsic::Undefined && !IsWrappedIntrinsic(funcCall->intrinsic))
        {
            /* Write GLSL intrinsic keyword */
            if (auto keyword = IntrinsicToGLSLKeyword(funcCall->intrinsic))
                Write(*keyword);
            else
                ErrorIntrinsic(funcCall->varIdent->Last()->ToString(), funcCall);
        }
        else
        {
            /* Write function identifier */
            Visit(funcCall->varIdent);
        }
    }
    else if (funcCall->typeDenoter)
    {
        /* Write type denoter */
        WriteTypeDenoter(*funcCall->typeDenoter, false, funcCall);
    }
    else
        Error(R_MissingFuncName, funcCall);

    /* Write arguments */
    Write("(");

    for (std::size_t i = 0, n = funcCall->arguments.size(), m = n + funcCall->defaultArgumentRefs.size(); i < m; ++i)
    {
        if (i < n)
            Visit(funcCall->arguments[i]);
        else
            Visit(funcCall->defaultArgumentRefs[i - n]);

        if (i + 1 < m)
            Write(", ");
    }

    Write(")");
}

void GLSLGenerator::WriteFunctionCallIntrinsicMul(FunctionCall* funcCall)
{
    AssertIntrinsicNumArgs(funcCall, 2, 2);

    auto WriteMulArgument = [&](const ExprPtr& expr)
    {
        /*
        Determine if the expression needs extra brackets when converted from a function call "mul(lhs, rhs)" to a binary expression "lhs * rhs",
        e.g. "mul(wMatrix, pos + float4(0, 1, 0, 0))" -> "wMatrix * (pos + float4(0, 1, 0, 0))" needs extra brackets
        */
        auto type = expr->Type();
        if (type == AST::Types::TernaryExpr || type == AST::Types::BinaryExpr || type == AST::Types::UnaryExpr || type == AST::Types::PostUnaryExpr)
        {
            Write("(");
            Visit(expr);
            Write(")");
        }
        else
            Visit(expr);
    };

    /* Convert this function call into a multiplication */
    Write("(");
    {
        WriteMulArgument(funcCall->arguments[0]);
        Write(" * ");
        WriteMulArgument(funcCall->arguments[1]);
    }
    Write(")");
}

void GLSLGenerator::WriteFunctionCallIntrinsicRcp(FunctionCall* funcCall)
{
    AssertIntrinsicNumArgs(funcCall, 1, 1);

    /* Get type denoter of argument expression */
    auto& expr = funcCall->arguments.front();
    auto typeDenoter = expr->GetTypeDenoter()->Get();

    if (auto baseTypeDen = typeDenoter->As<BaseTypeDenoter>())
    {
        /* Convert this function call into a division */
        Write("(");
        {
            WriteTypeDenoter(*baseTypeDen, false, funcCall);
            Write("(");
            WriteLiteral("1", *baseTypeDen, funcCall);
            Write(") / (");
            Visit(expr);
        }
        Write("))");
    }
    else
        Error(R_InvalidIntrinsicArgType("rcp"), expr.get());
}

void GLSLGenerator::WriteFunctionCallIntrinsicClip(FunctionCall* funcCall)
{
    AssertIntrinsicNumArgs(funcCall, 1, 1);

    /* Get type denoter of argument expression */
    auto& expr = funcCall->arguments.front();
    auto typeDenoter = expr->GetTypeDenoter()->Get();

    if (auto baseTypeDen = typeDenoter->As<BaseTypeDenoter>())
    {
        /* Convert this function call into a condition */
        Write("if (");

        if (baseTypeDen->IsVector())
        {
            /* Convert to: 'any(lessThan(...))' */
            Write("any(lessThan(");

            auto binaryExpr = expr->As<BinaryExpr>();

            if (binaryExpr && binaryExpr->op == BinaryOp::Sub)
            {
                /* Convert to: 'any(lessThan(LHS-EXPR, RHS-EXPR))' */
                Visit(binaryExpr->lhsExpr);
                Write(", ");
                Visit(binaryExpr->rhsExpr);
            }
            else
            {
                /* Convert to: 'any(lessThan(EXPR, TYPE(0)))' */
                Visit(expr);
                Write(", ");
                WriteLiteral("0", *baseTypeDen, expr.get());
            }

            Write("))");
        }
        else if (baseTypeDen->IsScalar())
        {
            /* Convert to: 'EXPR < ...' */
            auto binaryExpr = expr->As<BinaryExpr>();

            if (binaryExpr && binaryExpr->op == BinaryOp::Sub)
            {
                /* Convert to: 'LHS-EXPR < RHS-EXPR' */
                Visit(binaryExpr->lhsExpr);
                Write(" < ");
                Visit(binaryExpr->rhsExpr);
            }
            else
            {
                /* Convert to: 'EXPR < TYPE(0)' */
                Visit(expr);
                Write(" < ");
                WriteLiteral("0", *baseTypeDen, expr.get());
            }
        }
        else
            Error(R_InvalidIntrinsicArgType("clip"), expr.get());
    }
    else
        Error(R_InvalidIntrinsicArgType("clip"), expr.get());

    Write(")");
    
    /* Write if-body (we are still inside an active line, so first 'EndLn', then 'BeginLn') */
    EndLn();
    IncIndent();
    BeginLn();
    Write("discard");
    DecIndent();
}

void GLSLGenerator::WriteFunctionCallIntrinsicAtomic(FunctionCall* funcCall)
{
    AssertIntrinsicNumArgs(funcCall, 2, 3);

    /* Find atomic intrinsic mapping */
    if (auto keyword = IntrinsicToGLSLKeyword(funcCall->intrinsic))
    {
        /* Write function call */
        if (funcCall->arguments.size() >= 3)
        {
            Visit(funcCall->arguments[2]);
            Write(" = ");
        }
        Write(*keyword + "(");
        Visit(funcCall->arguments[0]);
        Write(", ");
        Visit(funcCall->arguments[1]);
        Write(")");
    }
    else
        ErrorIntrinsic(funcCall->varIdent->ToString(), funcCall);
}

void GLSLGenerator::WriteFunctionCallIntrinsicStreamOutputAppend(FunctionCall* funcCall)
{
    AssertIntrinsicNumArgs(funcCall, 1, 1);

    /* Write output semantic assignments by intrinsic argument */
    auto expr = funcCall->arguments.front().get();
    WriteOutputSemanticsAssignment(expr, true);

    /* Write "EmitVertex" intrinsic */
    Write("EmitVertex()");
}

// "CalculateLevelOfDetail"          -> "textureQueryLod(...).y"
// "CalculateLevelOfDetailUnclamped" -> "textureQueryLod(...).x"
void GLSLGenerator::WriteFunctionCallIntrinsicTextureQueryLod(FunctionCall* funcCall, bool clamped)
{
    AssertIntrinsicNumArgs(funcCall, 2, 2);

    /* Find 'textureQueryLod' intrinsic mapping */
    if (auto keyword = IntrinsicToGLSLKeyword(funcCall->intrinsic))
    {
        /* Write function call */
        Write(*keyword + "(");
        Visit(funcCall->arguments[0]);
        Write(", ");
        Visit(funcCall->arguments[1]);
        Write(").");
        Write(clamped ? "y" : "x");
    }
    else
        ErrorIntrinsic(funcCall->varIdent->ToString(), funcCall);
}

/* --- Intrinsics wrapper functions --- */

void GLSLGenerator::WriteWrapperIntrinsics()
{
    auto program = GetProgram();

    if (auto usage = program->FetchIntrinsicUsage(Intrinsic::Clip))
        WriteWrapperIntrinsicsClip(*usage);
    if (auto usage = program->FetchIntrinsicUsage(Intrinsic::SinCos))
        WriteWrapperIntrinsicsSinCos(*usage);
}

void GLSLGenerator::WriteWrapperIntrinsicsClip(const IntrinsicUsage& usage)
{
    bool wrappersWritten = false;

    for (const auto& argList : usage.argLists)
    {
        auto arg0Type = (!argList.argTypes.empty() ? argList.argTypes.front() : DataType::Undefined);
        
        if (IsScalarType(arg0Type) || IsVectorType(arg0Type))
        {
            BeginLn();
            {
                /* Write function signature */
                Write("void clip(");
                WriteDataType(arg0Type, IsESSL());
                Write(" x)");

                /* Write function body */
                WriteScopeOpen(compactWrappers_);
                {
                    Write("if (");

                    if (IsScalarType(arg0Type))
                    {
                        Write("x < ");
                        WriteLiteral("0", arg0Type);
                    }
                    else if (IsVectorType(arg0Type))
                    {
                        Write("any(lessThan(x, ");
                        WriteDataType(arg0Type);
                        Write("(0)))");
                    }

                    Write(")");
                    WriteScopeOpen(compactWrappers_);
                    {
                        Write("discard;");
                    }
                    WriteScopeClose();
                }
                WriteScopeClose();
            }
            EndLn();

            wrappersWritten = true;
        }
    }

    if (wrappersWritten)
        Blank();
}

void GLSLGenerator::WriteWrapperIntrinsicsSinCos(const IntrinsicUsage& usage)
{
    bool wrappersWritten = false;

    for (const auto& argList : usage.argLists)
    {
        if (argList.argTypes.size() == 3)
        {
            BeginLn();
            {
                /* Write function signature */
                Write("void sincos(");
                WriteDataType(argList.argTypes[0], IsESSL());
                Write(" x, out ");
                WriteDataType(argList.argTypes[1], IsESSL());
                Write(" s, out ");
                WriteDataType(argList.argTypes[2], IsESSL());
                Write(" c)");

                /* Write function body */
                WriteScopeOpen(compactWrappers_);
                {
                    Write("s = sin(x), c = cos(x);");
                }
                WriteScopeClose();
            }
            EndLn();

            wrappersWritten = true;
        }
    }

    if (wrappersWritten)
        Blank();
}

/* --- Structure --- */

bool GLSLGenerator::WriteStructDecl(StructDecl* structDecl, bool writeSemicolon, bool allowNestedStruct)
{
    /* Is this a non-nested structure or are nested structures allowed in the current context? */
    if (!structDecl->flags(StructDecl::isNestedStruct) || allowNestedStruct)
    {
        //TODO: remove interface blocks
        #if 0
        /* Is this an interface block or a standard structure? */
        if (structDecl->flags(StructDecl::isShaderInput) || structDecl->flags(StructDecl::isShaderOutput))
        {
            /* Write structure as shader input/output block */
            return WriteStructDeclInputOutputBlock(structDecl);
        }
        else
        #endif
        {
            /* Write standard structure declaration */
            return WriteStructDeclStandard(structDecl, writeSemicolon);
        }
    }
    else if (!writeSemicolon)
    {
        /* Do not end line here with "EndLn" */
        BeginLn();
        Write(structDecl->ident + " ");
    }
    return false;
}

bool GLSLGenerator::WriteStructDeclStandard(StructDecl* structDecl, bool endWithSemicolon)
{
    /* Write structure signature */
    BeginLn();

    Write("struct");
    if (!structDecl->ident.Empty())
        Write(' ' + structDecl->ident);

    /* Write structure members */
    WriteScopeOpen(false, endWithSemicolon);
    BeginSep();
    {
        WriteStructDeclMembers(structDecl);
    }
    EndSep();
    WriteScopeClose();

    return true;
}

bool GLSLGenerator::WriteStructDeclInputOutputBlock(StructDecl* structDecl)
{
    /* Only write input/output block if there is a non-system-value member */
    if (!structDecl->HasNonSystemValueMembers())
        return false;
    
    /* Write this structure as interface block (if structure doesn't need to be resolved) */
    BeginLn();
    
    if (structDecl->flags(StructDecl::isShaderInput))
        Write("in ");
    else
        Write("out ");
    Write(structDecl->ident);

    WriteScopeOpen();
    BeginSep();
    {
        isInsideInterfaceBlock_ = true;
        {
            WriteStructDeclMembers(structDecl);
        }
        isInsideInterfaceBlock_ = false;
    }
    EndSep();
    WriteScopeClose();

    WriteLn(structDecl->aliasName + ";");

    return true;
}

void GLSLGenerator::WriteStructDeclMembers(StructDecl* structDecl)
{
    if (structDecl->baseStructRef)
        WriteStructDeclMembers(structDecl->baseStructRef);
    Visit(structDecl->varMembers);
}

/* --- BufferDecl --- */

void GLSLGenerator::WriteBufferDecl(BufferDecl* bufferDecl)
{
    if (bufferDecl->flags(AST::isReachable))
    {
        if (IsTextureBufferType(bufferDecl->GetBufferType()))
            WriteBufferDeclTexture(bufferDecl);
        else
            WriteBufferDeclStorageBuffer(bufferDecl);
        Blank();
    }
}

void GLSLGenerator::WriteBufferDeclTexture(BufferDecl* bufferDecl)
{
    /* Determine GLSL sampler type (or VKSL texture type) */
    auto bufferTypeKeyword = BufferTypeToKeyword(bufferDecl->GetBufferType(), bufferDecl->declStmntRef);
    if (!bufferTypeKeyword)
        return;

    BeginLn();
    {
        /* Write uniform declaration */
        WriteLayout(
            {
                [&]() { WriteLayoutImageFormat(bufferDecl->declStmntRef->typeDenoter->genericTypeDenoter, bufferDecl); },
                [&]() { WriteLayoutBinding(bufferDecl->slotRegisters); },
            }
        );

        Write("uniform ");

        /* Write sampler type and identifier */
        if (auto genericTypeDen = bufferDecl->declStmntRef->typeDenoter->genericTypeDenoter)
        {
            if (auto baseTypeDen = genericTypeDen->As<BaseTypeDenoter>())
            {
                if (IsIntType(baseTypeDen->dataType))
                    Write("i");
                else if (IsUIntType(baseTypeDen->dataType))
                    Write("u");
            }
        }

        Write(*bufferTypeKeyword + " " + bufferDecl->ident);

        /* Write array dimensions and statement terminator */
        Visit(bufferDecl->arrayDims);
        Write(";");
    }
    EndLn();
}

void GLSLGenerator::WriteBufferDeclStorageBuffer(BufferDecl* bufferDecl)
{
    /* Determine GLSL buffer type */
    auto bufferTypeKeyword = BufferTypeToKeyword(bufferDecl->GetBufferType(), bufferDecl->declStmntRef);
    if (!bufferTypeKeyword)
        return;

    /* Write buffer declaration */
    BeginLn();
    {
        WriteLayout(
            {
                [&]() { Write("std430"); },
                [&]() { WriteLayoutBinding(bufferDecl->slotRegisters); },
            }
        );
        Write(*bufferTypeKeyword + " " + nameMangling_.temporaryPrefix + bufferDecl->ident);
    }
    EndLn();

    /* Write buffer array (of variable size) */
    WriteScopeOpen(false, true);
    {
        BeginLn();
        {
            /* Write optional memory type qualifier */
            if (!IsRWBufferType(bufferDecl->GetBufferType()))
                Write("readonly ");

            /* Write generic type denoterand identifier */
            auto genericTypeDen = bufferDecl->declStmntRef->typeDenoter->GetGenericTypeDenoter();
            WriteTypeDenoter(*genericTypeDen, IsESSL(), bufferDecl);
            Write(" " + bufferDecl->ident + "[];");
        }
        EndLn();
    }
    WriteScopeClose();
}

/* --- Misc --- */

void GLSLGenerator::WriteStmntComment(Stmnt* ast, bool insertBlank)
{
    if (ast && !ast->comment.empty())
    {
        if (insertBlank)
            Blank();
        WriteComment(ast->comment);
    }
}

template <typename T>
void GLSLGenerator::WriteStmntList(const std::vector<T>& stmnts, bool isGlobalScope)
{
    if (preserveComments_)
    {
        /* Write statements with optional commentaries */
        for (std::size_t i = 0; i < stmnts.size(); ++i)
        {
            auto ast = stmnts[i].get();

            if (!isGlobalScope || ast->flags(AST::isReachable))
                WriteStmntComment(ast, (!isGlobalScope && (i > 0)));

            Visit(ast);
        }
    }
    else
    {
        /* Write statements only */
        Visit(stmnts);
    }
}

void GLSLGenerator::WriteParameter(VarDeclStmnt* ast)
{
    /* Write input modifier */
    if (ast->IsOutput())
    {
        if (ast->IsInput())
            Write("inout ");
        else
            Write("out ");
    }

    /* Write type modifiers */
    WriteTypeModifiersFrom(ast->typeSpecifier);

    /* Write parameter type */
    Visit(ast->typeSpecifier);
    Write(" ");

    /* Write parameter identifier (without default initializer) */
    if (ast->varDecls.size() == 1)
    {
        auto paramVar = ast->varDecls.front().get();
        Write(paramVar->ident);
        Visit(paramVar->arrayDims);
    }
    else
        Error(R_InvalidParamVarCount, ast);
}

void GLSLGenerator::WriteScopedStmnt(Stmnt* ast)
{
    if (ast)
    {
        if (ast->Type() != AST::Types::CodeBlockStmnt)
        {
            WriteScopeOpen(false, false, alwaysBracedScopes_);
            {
                Visit(ast);
            }
            WriteScopeClose();
        }
        else
            Visit(ast);
    }
}

void GLSLGenerator::WriteArrayIndices(const std::vector<ExprPtr>& arrayDims)
{
    for (auto& dim : arrayDims)
    {
        Write("[");
        Visit(dim);
        Write("]");
    }
}

void GLSLGenerator::WriteLiteral(const std::string& value, const BaseTypeDenoter& baseTypeDen, const AST* ast)
{
    if (baseTypeDen.IsScalar())
    {
        Write(value);

        switch (baseTypeDen.dataType)
        {
            case DataType::UInt:
                Write("u");
                break;
            case DataType::Float:
                if (value.find_first_of(".eE") == std::string::npos)
                    Write(".0");
                Write("f");
                break;
            default:
                break;
        }
    }
    else if (baseTypeDen.IsVector())
    {
        WriteDataType(baseTypeDen.dataType, false, ast);
        Write("(");
        Write(value);
        Write(")");
    }
    else
        Error(R_FailedToWriteLiteralType(value), ast);
}

void GLSLGenerator::WriteLayout(const std::initializer_list<LayoutEntryFunctor>& entryFunctors)
{
    PushWritePrefix("layout(");
    {
        bool firstWritten = false;

        for (const auto& entryFunc : entryFunctors)
        {
            /* Write comma separator, if this is not the first entry */
            if (firstWritten)
            {
                /* Push comman separator as prefix for the next layout entry */
                PushWritePrefix(", ");
                {
                    entryFunc();
                }
                PopWritePrefix();
            }
            else
            {
                /* Call function for the first layout entry */
                entryFunc();
                firstWritten = true;
            }
        }

        if (TopWritePrefix())
            Write(") ");
    }
    PopWritePrefix();
}

void GLSLGenerator::WriteLayout(const std::string& value)
{
    WriteLayout({ [&]() { Write(value); } });
}

void GLSLGenerator::WriteLayoutGlobal(const std::initializer_list<LayoutEntryFunctor>& entryFunctors, const LayoutEntryFunctor& varFunctor, const std::string& modifier)
{
    BeginLn();
    {
        WriteLayout(entryFunctors);
        if (varFunctor)
        {
            Write(modifier + ' ');
            varFunctor();
            Write(";");
        }
        else
            Write(modifier + ';');
    }
    EndLn();
}

void GLSLGenerator::WriteLayoutGlobalIn(const std::initializer_list<LayoutEntryFunctor>& entryFunctors, const LayoutEntryFunctor& varFunctor)
{
    WriteLayoutGlobal(entryFunctors, varFunctor, "in");
}

void GLSLGenerator::WriteLayoutGlobalOut(const std::initializer_list<LayoutEntryFunctor>& entryFunctors, const LayoutEntryFunctor& varFunctor)
{
    WriteLayoutGlobal(entryFunctors, varFunctor, "out");
}

void GLSLGenerator::WriteLayoutBinding(const std::vector<RegisterPtr>& slotRegisters)
{
    if (explicitBinding_)
    {
        if (auto slotRegister = Register::GetForTarget(slotRegisters, GetShaderTarget()))
            Write("binding = " + std::to_string(slotRegister->slot));
    }
}

void GLSLGenerator::WriteLayoutImageFormat(const TypeDenoterPtr& typeDenoter, const AST* ast)
{
    if (typeDenoter)
    {
        if (auto baseTypeDen = typeDenoter->As<BaseTypeDenoter>())
        {
            if (auto keyword = DataTypeToImageFormatKeyword(baseTypeDen->dataType, ast))
                Write(*keyword);
        }
    }
}


} // /namespace Xsc



// ================================================================================
